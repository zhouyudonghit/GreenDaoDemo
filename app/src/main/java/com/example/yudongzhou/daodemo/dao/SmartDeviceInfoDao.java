package com.example.yudongzhou.daodemo.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.yudongzhou.database.entity.SmartDeviceInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SMART_DEVICE_INFO".
*/
public class SmartDeviceInfoDao extends AbstractDao<SmartDeviceInfo, String> {

    public static final String TABLENAME = "SMART_DEVICE_INFO";

    /**
     * Properties of entity SmartDeviceInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DeviceId = new Property(0, String.class, "deviceId", true, "DEVICE_ID");
        public final static Property NickName = new Property(1, String.class, "nickName", false, "NICK_NAME");
        public final static Property DeviceName = new Property(2, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property ModleId = new Property(3, String.class, "modleId", false, "MODLE_ID");
        public final static Property ModelName = new Property(4, String.class, "modelName", false, "MODEL_NAME");
        public final static Property ModelType = new Property(5, String.class, "modelType", false, "MODEL_TYPE");
        public final static Property GroupId = new Property(6, String.class, "groupId", false, "GROUP_ID");
        public final static Property OwnerId = new Property(7, String.class, "ownerId", false, "OWNER_ID");
        public final static Property BindedTime = new Property(8, java.util.Date.class, "bindedTime", false, "BINDED_TIME");
        public final static Property LastReprotTime = new Property(9, java.util.Date.class, "lastReprotTime", false, "LAST_REPROT_TIME");
        public final static Property UsedTimes = new Property(10, int.class, "usedTimes", false, "USED_TIMES");
        public final static Property Version = new Property(11, String.class, "version", false, "VERSION");
        public final static Property CategoryId = new Property(12, String.class, "categoryId", false, "CATEGORY_ID");
        public final static Property CategoryName = new Property(13, String.class, "categoryName", false, "CATEGORY_NAME");
        public final static Property Bind_state = new Property(14, int.class, "bind_state", false, "BIND_STATE");
    }

    private Query<SmartDeviceInfo> smartDeviceOwner_DeviceInfosQuery;

    public SmartDeviceInfoDao(DaoConfig config) {
        super(config);
    }
    
    public SmartDeviceInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SMART_DEVICE_INFO\" (" + //
                "\"DEVICE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: deviceId
                "\"NICK_NAME\" TEXT," + // 1: nickName
                "\"DEVICE_NAME\" TEXT," + // 2: deviceName
                "\"MODLE_ID\" TEXT," + // 3: modleId
                "\"MODEL_NAME\" TEXT," + // 4: modelName
                "\"MODEL_TYPE\" TEXT," + // 5: modelType
                "\"GROUP_ID\" TEXT," + // 6: groupId
                "\"OWNER_ID\" TEXT NOT NULL ," + // 7: ownerId
                "\"BINDED_TIME\" INTEGER," + // 8: bindedTime
                "\"LAST_REPROT_TIME\" INTEGER," + // 9: lastReprotTime
                "\"USED_TIMES\" INTEGER NOT NULL ," + // 10: usedTimes
                "\"VERSION\" TEXT," + // 11: version
                "\"CATEGORY_ID\" TEXT," + // 12: categoryId
                "\"CATEGORY_NAME\" TEXT," + // 13: categoryName
                "\"BIND_STATE\" INTEGER NOT NULL );"); // 14: bind_state
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SMART_DEVICE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SmartDeviceInfo entity) {
        stmt.clearBindings();
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(1, deviceId);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(3, deviceName);
        }
 
        String modleId = entity.getModleId();
        if (modleId != null) {
            stmt.bindString(4, modleId);
        }
 
        String modelName = entity.getModelName();
        if (modelName != null) {
            stmt.bindString(5, modelName);
        }
 
        String modelType = entity.getModelType();
        if (modelType != null) {
            stmt.bindString(6, modelType);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(7, groupId);
        }
        stmt.bindString(8, entity.getOwnerId());
 
        java.util.Date bindedTime = entity.getBindedTime();
        if (bindedTime != null) {
            stmt.bindLong(9, bindedTime.getTime());
        }
 
        java.util.Date lastReprotTime = entity.getLastReprotTime();
        if (lastReprotTime != null) {
            stmt.bindLong(10, lastReprotTime.getTime());
        }
        stmt.bindLong(11, entity.getUsedTimes());
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(12, version);
        }
 
        String categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindString(13, categoryId);
        }
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(14, categoryName);
        }
        stmt.bindLong(15, entity.getBind_state());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SmartDeviceInfo entity) {
        stmt.clearBindings();
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(1, deviceId);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(2, nickName);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(3, deviceName);
        }
 
        String modleId = entity.getModleId();
        if (modleId != null) {
            stmt.bindString(4, modleId);
        }
 
        String modelName = entity.getModelName();
        if (modelName != null) {
            stmt.bindString(5, modelName);
        }
 
        String modelType = entity.getModelType();
        if (modelType != null) {
            stmt.bindString(6, modelType);
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(7, groupId);
        }
        stmt.bindString(8, entity.getOwnerId());
 
        java.util.Date bindedTime = entity.getBindedTime();
        if (bindedTime != null) {
            stmt.bindLong(9, bindedTime.getTime());
        }
 
        java.util.Date lastReprotTime = entity.getLastReprotTime();
        if (lastReprotTime != null) {
            stmt.bindLong(10, lastReprotTime.getTime());
        }
        stmt.bindLong(11, entity.getUsedTimes());
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(12, version);
        }
 
        String categoryId = entity.getCategoryId();
        if (categoryId != null) {
            stmt.bindString(13, categoryId);
        }
 
        String categoryName = entity.getCategoryName();
        if (categoryName != null) {
            stmt.bindString(14, categoryName);
        }
        stmt.bindLong(15, entity.getBind_state());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SmartDeviceInfo readEntity(Cursor cursor, int offset) {
        SmartDeviceInfo entity = new SmartDeviceInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // deviceId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // modleId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // modelName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // modelType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // groupId
            cursor.getString(offset + 7), // ownerId
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // bindedTime
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // lastReprotTime
            cursor.getInt(offset + 10), // usedTimes
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // version
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // categoryId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // categoryName
            cursor.getInt(offset + 14) // bind_state
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SmartDeviceInfo entity, int offset) {
        entity.setDeviceId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNickName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setModleId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setModelName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setModelType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGroupId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOwnerId(cursor.getString(offset + 7));
        entity.setBindedTime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setLastReprotTime(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setUsedTimes(cursor.getInt(offset + 10));
        entity.setVersion(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCategoryId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCategoryName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBind_state(cursor.getInt(offset + 14));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SmartDeviceInfo entity, long rowId) {
        return entity.getDeviceId();
    }
    
    @Override
    public String getKey(SmartDeviceInfo entity) {
        if(entity != null) {
            return entity.getDeviceId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SmartDeviceInfo entity) {
        return entity.getDeviceId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "deviceInfos" to-many relationship of SmartDeviceOwner. */
    public List<SmartDeviceInfo> _querySmartDeviceOwner_DeviceInfos(String ownerId) {
        synchronized (this) {
            if (smartDeviceOwner_DeviceInfosQuery == null) {
                QueryBuilder<SmartDeviceInfo> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OwnerId.eq(null));
                smartDeviceOwner_DeviceInfosQuery = queryBuilder.build();
            }
        }
        Query<SmartDeviceInfo> query = smartDeviceOwner_DeviceInfosQuery.forCurrentThread();
        query.setParameter(0, ownerId);
        return query.list();
    }

}
