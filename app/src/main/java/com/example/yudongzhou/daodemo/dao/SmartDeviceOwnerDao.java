package com.example.yudongzhou.daodemo.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.yudongzhou.database.entity.SmartDeviceOwner;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SMART_DEVICE_OWNER".
*/
public class SmartDeviceOwnerDao extends AbstractDao<SmartDeviceOwner, String> {

    public static final String TABLENAME = "SMART_DEVICE_OWNER";

    /**
     * Properties of entity SmartDeviceOwner.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OwnerId = new Property(0, String.class, "ownerId", true, "OWNER_ID");
        public final static Property DeviceId = new Property(1, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property ModelId = new Property(2, String.class, "modelId", false, "MODEL_ID");
        public final static Property Num = new Property(3, String.class, "num", false, "NUM");
        public final static Property Attr = new Property(4, String.class, "attr", false, "ATTR");
        public final static Property CreateUserId = new Property(5, String.class, "createUserId", false, "CREATE_USER_ID");
        public final static Property LastModifyUserId = new Property(6, String.class, "lastModifyUserId", false, "LAST_MODIFY_USER_ID");
        public final static Property CreateTime = new Property(7, String.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(8, String.class, "updateTime", false, "UPDATE_TIME");
    }

    private DaoSession daoSession;


    public SmartDeviceOwnerDao(DaoConfig config) {
        super(config);
    }
    
    public SmartDeviceOwnerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SMART_DEVICE_OWNER\" (" + //
                "\"OWNER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ownerId
                "\"DEVICE_ID\" TEXT," + // 1: deviceId
                "\"MODEL_ID\" TEXT," + // 2: modelId
                "\"NUM\" TEXT," + // 3: num
                "\"ATTR\" TEXT," + // 4: attr
                "\"CREATE_USER_ID\" TEXT," + // 5: createUserId
                "\"LAST_MODIFY_USER_ID\" TEXT," + // 6: lastModifyUserId
                "\"CREATE_TIME\" TEXT," + // 7: createTime
                "\"UPDATE_TIME\" TEXT);"); // 8: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SMART_DEVICE_OWNER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SmartDeviceOwner entity) {
        stmt.clearBindings();
 
        String ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindString(1, ownerId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
 
        String modelId = entity.getModelId();
        if (modelId != null) {
            stmt.bindString(3, modelId);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(4, num);
        }
 
        String attr = entity.getAttr();
        if (attr != null) {
            stmt.bindString(5, attr);
        }
 
        String createUserId = entity.getCreateUserId();
        if (createUserId != null) {
            stmt.bindString(6, createUserId);
        }
 
        String lastModifyUserId = entity.getLastModifyUserId();
        if (lastModifyUserId != null) {
            stmt.bindString(7, lastModifyUserId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(8, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(9, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SmartDeviceOwner entity) {
        stmt.clearBindings();
 
        String ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindString(1, ownerId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
 
        String modelId = entity.getModelId();
        if (modelId != null) {
            stmt.bindString(3, modelId);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(4, num);
        }
 
        String attr = entity.getAttr();
        if (attr != null) {
            stmt.bindString(5, attr);
        }
 
        String createUserId = entity.getCreateUserId();
        if (createUserId != null) {
            stmt.bindString(6, createUserId);
        }
 
        String lastModifyUserId = entity.getLastModifyUserId();
        if (lastModifyUserId != null) {
            stmt.bindString(7, lastModifyUserId);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(8, createTime);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(9, updateTime);
        }
    }

    @Override
    protected final void attachEntity(SmartDeviceOwner entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SmartDeviceOwner readEntity(Cursor cursor, int offset) {
        SmartDeviceOwner entity = new SmartDeviceOwner( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ownerId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // modelId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // num
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // attr
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createUserId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lastModifyUserId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // createTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SmartDeviceOwner entity, int offset) {
        entity.setOwnerId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDeviceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setModelId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAttr(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateUserId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLastModifyUserId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SmartDeviceOwner entity, long rowId) {
        return entity.getOwnerId();
    }
    
    @Override
    public String getKey(SmartDeviceOwner entity) {
        if(entity != null) {
            return entity.getOwnerId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SmartDeviceOwner entity) {
        return entity.getOwnerId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
